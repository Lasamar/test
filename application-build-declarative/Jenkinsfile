#!groovy
import groovy.transform.Field
import hudson.model.*


def applicationName
def ldapCredentials
def artifactType

def repositoryArtifactory
def groupId
def artifactId
def artifactVersion
def artifactoryUrl
def configFile
def modulesFolder
def middleware

def getRealVersion(maven_metadata) {
    def mavenMetadata = new File(maven_metadata).getText()
    def xmlSlurper = new XmlSlurper().parseText(mavenMetadata)
    def realVersion = xmlSlurper.versioning.snapshotVersions.snapshotVersion[0].value.text()
    return realVersion
}


pipeline {

    parameters {
        string(name: 'APPLICATION_NAME', description: 'Identificativo dell&apos;applicazione. Deve rispecchiare il label utilizzato nella creazione dell&apos;applicazione.')
        credentials(name: 'LDAP_CREDENTIAL', description: 'Credenziali LDAP, registrarle a scope Global per permettere alle pipeline generate di mantenerle.', defaultValue: '', credentialType: "any", required: true)
        string(name: 'ARTIFACT_VERSION', description: 'Versione del war che si desidera rilasciare')
        choice(name: 'ARTIFACT_TYPE', choices: 'SNAPSHOT\nRELEASE', description: 'tipologia artefatto: SNAPSHOT, RELEASE')
        string(name: 'ARTIFACTORY_REPOSITORY', description: 'artifactory dalla quale recuperare l\'arteffato')
        string(name: 'GROUP_ID', description: '')
        string(name: 'ARTIFACT_ID', description: '')
        string(name: 'ARTIFACTORY_URL', description: '')
        string(name: 'CONFIG_FILE', description: '')
        string(name: 'MODULES_FOLDER', description: '')
        choice(name: 'MIDDLEWARE', choices: 'SNAPSHOT\nRELEASE', description: 'tipologia artefatto: SNAPSHOT, RELEASE')
    }

    agent {
        node {
            label('master')
        }
    }

    stages {
        stage('INIT') {
            steps {
                script {
                    sh 'rm -f *war'
                    sh "rm -rf ${env.WORKSPACE}/deployment"
                    sh 'rm -f maven-metadata.xml maven-metadata-version.xml'
                }
            }
        }
        stage('CHECK PARAMETERS') {
            steps {
                script {

                    if ((env.GROUP_ID == null) || env.GROUP_ID.isEmpty()) {
                        error 'Il parametro GROUP_ID è null o non è valorizzato!'
                    } else {
                        groupId = env.GROUP_ID.replaceAll("\\s", "")
                    }
                    if ((env.ARTIFACT_ID == null) || env.ARTIFACT_ID.isEmpty()) {
                        error 'Il parametro ARTIFACT_ID è null o non è valorizzato!'
                    } else {
                        artifactId = env.ARTIFACT_ID.replaceAll("\\s", "")
                    }
                    if ((env.ARTIFACT_VERSION == null) || env.ARTIFACT_VERSION.isEmpty()) {
                        error 'Il parametro ARTIFACT_VERSION è null o non è valorizzato!'
                    } else {
                        artifactVersion = env.ARTIFACT_VERSION.replaceAll("\\s", "")
                    }
                    if ((env.ARTIFACTORY_REPOSITORY == null) || env.ARTIFACTORY_REPOSITORY.isEmpty()) {
                        error 'Il parametro ARTIFACTORY_REPOSITORY è null o non è valorizzato!'
                    } else {
                        repositoryArtifactory = env.ARTIFACTORY_REPOSITORY.replaceAll("\\s", "")
                    }
                    if ((env.ARTIFACTORY_URL == null) || env.ARTIFACTORY_URL.isEmpty()) {
                        error 'Il parametro ARTIFACTORY_URL è null o non è valorizzato!'
                    } else {
                        artifactoryUrl = env.ARTIFACTORY_URL.replaceAll("\\s", "")
                    }
                    if ((env.LDAP_CREDENTIAL == null) || env.LDAP_CREDENTIAL.isEmpty()) {
                        error 'Il parametro LDAP_CREDENTIAL è null o non è valorizzato!'
                    } else {
                        ldapCredentials = env.LDAP_CREDENTIAL
                    }
                    if ((env.CONFIG_FILE == null) || env.CONFIG_FILE.isEmpty()) {
                        error 'Il parametro CONFIG_FILE è null o non è valorizzato!'
                    } else {
                        configFile = env.CONFIG_FILE
                    }
                    if ((env.MODULES_FOLDER == null) || env.MODULES_FOLDER.isEmpty()) {
                        error 'Il parametro MODULES_FOLDER è null o non è valorizzato!'
                    } else {
                        modulesFolder = env.MODULES_FOLDER
                    }
                    if ((env.APPLICATION_NAME == null) || env.APPLICATION_NAME.isEmpty()) {
                        error 'Il parametro APPLICATION_NAME è null o non è valorizzato!'
                    } else {
                        applicationName = env.APPLICATION_NAME.replaceAll("\\s", "")
                    }
                    middleware = env.MIDDLEWARE

                    if (artifactoryUrl.endsWith("/")) {
                        artifactoryUrl = artifactoryUrl.substring(0, artifactoryUrl.size() - 1)
                    }
                    groupId = groupId.replace('.', '/')
                    artifactType = env.ARTIFACT_TYPE

                }
            }
        }
        stage('DOWNLOAD CONFIGURATION') {
            steps {
                script {

                    checkout([$class      : 'GitSCM', branches: [[name: gitBranch]], doGenerateSubmoduleConfigurations: false, extensions: [],
                              submoduleCfg: [], userRemoteConfigs: [[url: gitUrl]]])
                }
            }
        }
        stage('DOWNLOAD LATEST ARTIFACT') {
            steps {
                script {
                    def server = Artifactory.newServer url: artifactoryUrl, credentialsId: ldapCredentials
                    def downloadWar
                    if ("SNAPSHOT".equals(artifactType)) {
                        def downloadSpec = """{
                            "files": [
                            {
                              "pattern": "$repositoryArtifactory/$groupId/$artifactId/$artifactVersion/maven-metadata.xml",
                              "target": "./"
                            }
                                     ]
                            }"""
                        server.download(downloadSpec);

                        def buildValue = getRealVersion "${env.WORKSPACE}/$groupId/$artifactId/$artifactVersion/maven-metadata.xml"
                        def FILE_PATH = repositoryArtifactory + '/' + groupId + '/' + artifactId + '/' + artifactVersion + '/' + artifactId + '-' + buildValue + '.war'
                        downloadWar = """{
                            "files": [
                            {
                              "pattern": "$FILE_PATH",
                              "target": "./"
                            }
                                     ]
                            }"""
                    } else {
                        def FILE_PATH = repositoryArtifactory + '/' + groupId + '/' + artifactId + '/' + artifactVersion + '/' + artifactId + '-' + artifactVersion + '.war'
                        downloadWar = """{
                            "files": [
                            {
                              "pattern": "$FILE_PATH",
                              "target": "./"
                            }
                                     ]
                            }"""
                    }
                    server.download(downloadWar);
                }
            }
        }
        stage('REDEPLOY') {
            steps {
                script {
                    sh 'rm -f maven-metadata.xml maven-metadata-version.xml'

                    sh "mkdir -p ${env.WORKSPACE}/deployment/configuration/"
                    sh "mv ${env.WORKSPACE}/$groupId/$artifactId/$artifactVersion/*.war ${env.WORKSPACE}/deployment/"

                    if ('jboss'.equals($middleware)) {

                        if (!"NONE".equals(modulesFolder)) {
                            if (fileExists(modulesFolder)) {
                                sh "mkdir -p ${env.WORKSPACE}/deployment/modules/"
                                sh "cp -r ${modulesFolder} ${env.WORKSPACE}/deployment/modules"
                            } else {
                                error 'Non è stata trovata nessuna cartella associata al path MODULES=${modulesFolder}'
                            }
                        }

                        if ("NONE".equals(configFile)) {
                            configFile = "standalone-openshift.xml"
                        }

                        configFile = 'jboss/standalone/' + configFile

                        if (fileExists(configFile)) {
                            sh "mv ${configFile} ./standalone-openshift.xml"
                            sh "cp standalone-openshift.xml ${env.WORKSPACE}/deployment/configuration/"
                        } else {
                            error 'Non è stata trovata nessuna cartella associata al path STANDALONE=${configFile}'
                        }
                    } else {
                        // Tomcat

                        sh "mkdir -p ${env.WORKSPACE}/deployment/lib/"
                        sh "mkdir -p ${env.WORKSPACE}/deployment/bin/"

                        // necessari all'utilizzo di tomcat-vault

                        sh "mv tomcat/lib/tomcat-vault/tomcat-vault.jar ${env.WORKSPACE}/deployment/lib/"
                        sh "mv tomcat/server/catalina.properties ${env.WORKSPACE}/deployment/configuration/"
                        sh "mv tomcat/bin/ ${env.WORKSPACE}/deployment/"
                        sh "mv tomcat/scripts/common.sh ${env.WORKSPACE}/deployment/"

                        if (!"NONE".equals(modulesFolder)) {
                            if (fileExists(modulesFolder)) {
                                sh "cp -r ${modulesFolder} ${env.WORKSPACE}/deployment/lib"
                            } else {
                                error 'Non è stata trovata nessuna cartella associata al path LIB=${modulesFolder}'
                            }
                        }
                        if (!"NONE".equals(configFile)) {
                            config_path = 'tomcat/server/' + configFile
                            if (fileExists(configFile)) {
                                sh "mv ${configFile} ./server.xml"
                                sh "cp server.xml ${env.WORKSPACE}/deployment/configuration/"
                            }
                        }
                    }
                    sh "oc start-build ${applicationName} --from-dir=${env.WORKSPACE}/deployment/"
                }
            }
        }

    }
}
